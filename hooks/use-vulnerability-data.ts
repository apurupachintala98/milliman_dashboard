"use client"

import { useState, useEffect } from "react"

interface VulnerabilityData {
  name: string
  value: number
  color?: string
}

export function useVulnerabilityData() {
  const [severityData, setSeverityData] = useState<VulnerabilityData[]>([
    { name: "High", value: 32, color: "#e74c3c" },
    { name: "Medium", value: 243, color: "#f39c12" },
    { name: "Low", value: 405, color: "#f1c40f" },
    { name: "Informational", value: 810, color: "#3498db" },
    { name: "Safe", value: 130, color: "#2ecc71" },
  ])

  const [statusData, setStatusData] = useState<VulnerabilityData[]>([
    { name: "Unreviewed", value: 1604, color: "#1abc9c" },
    { name: "Ignored", value: 5, color: "#3498db" },
    { name: "False Positive", value: 3, color: "#9b59b6" },
    { name: "Verified", value: 4, color: "#e67e22" },
    { name: "Remediated", value: 2, color: "#e74c3c" },
    { name: "Duplicated", value: 2, color: "#f1c40f" },
  ])

  // Simulate data refresh
  useEffect(() => {
    const interval = setInterval(
      () => {
        // In a real app, you would fetch fresh data here
        console.log("Refreshing data...")
      },
      5 * 60 * 1000,
    ) // Every 5 minutes

    return () => clearInterval(interval)
  }, [])

  // Function to refresh data on demand
  const refreshData = async () => {
    try {
      // In a real app, you would fetch fresh data here
      console.log("Manually refreshing data...")

      // Example of how you might update the data
      // const response = await fetch('/api/vulnerabilities')
      // const data = await response.json()
      // setSeverityData(data.severityData)
      // setStatusData(data.statusData)
    } catch (error) {
      console.error("Failed to refresh data:", error)
    }
  }

  return {
    severityData,
    statusData,
    refreshData,
  }
}
